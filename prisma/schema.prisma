generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  name         String
  email        String   @unique
  passwordHash String   @map("password_hash")
  role         String   // "freelancer", "client", "admin"
  status       String   @default("active") // "active", "suspended", "deactivated"
  avatarUrl    String?  @map("avatar_url")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  freelancerProfile FreelancerProfile?
  clientJobs        Job[]              @relation("ClientJobs")
  freelancerProposals Proposal[]       @relation("FreelancerProposals")
  sentMessages      Message[]          @relation("SentMessages")
  receivedMessages  Message[]          @relation("ReceivedMessages")
  givenReviews      Review[]           @relation("GivenReviews")
  receivedReviews   Review[]           @relation("ReceivedReviews")

  @@map("users")
}

model FreelancerProfile {
  id            String   @id @default(cuid())
  userId        String   @unique @map("user_id")
  skills        String[] // Array of skills
  hourlyRate    Decimal? @map("hourly_rate") @db.Decimal(10, 2)
  portfolioLinks String[] @map("portfolio_links") // Array of portfolio URLs
  bio           String?
  availability  String   @default("available") // "available", "busy", "unavailable"
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("freelancer_profiles")
}

model Job {
  id          String   @id @default(cuid())
  clientId    String   @map("client_id")
  title       String
  description String
  budget      Decimal  @db.Decimal(10, 2)
  deadline    DateTime
  status      String   @default("open") // "open", "in_progress", "completed", "cancelled"
  category    String?
  skillsRequired String[] @map("skills_required")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  client    User       @relation("ClientJobs", fields: [clientId], references: [id], onDelete: Cascade)
  proposals Proposal[]
  messages  Message[]
  reviews   Review[]

  @@map("jobs")
}

model Proposal {
  id            String   @id @default(cuid())
  jobId         String   @map("job_id")
  freelancerId  String   @map("freelancer_id")
  message       String
  proposedPrice Decimal  @map("proposed_price") @db.Decimal(10, 2)
  status        String   @default("pending") // "pending", "accepted", "rejected", "withdrawn"
  deliveryTime  Int?     @map("delivery_time") // Days to complete
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  job        Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  freelancer User              @relation("FreelancerProposals", fields: [freelancerId], references: [id], onDelete: Cascade)

  @@map("proposals")
}

model Message {
  id         String   @id @default(cuid())
  senderId   String   @map("sender_id")
  receiverId String   @map("receiver_id")
  jobId      String?  @map("job_id") // Optional - messages can be general or job-specific
  content    String
  timestamp  DateTime @default(now())
  isRead     Boolean  @default(false) @map("is_read")

  // Relations
  sender   User @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  job      Job? @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Review {
  id         String   @id @default(cuid())
  reviewerId String   @map("reviewer_id")
  revieweeId String   @map("reviewee_id")
  jobId      String   @map("job_id")
  rating     Int      // 1-5 stars
  comment    String?
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  reviewer User @relation("GivenReviews", fields: [reviewerId], references: [id], onDelete: Cascade)
  reviewee User @relation("ReceivedReviews", fields: [revieweeId], references: [id], onDelete: Cascade)
  job      Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([reviewerId, revieweeId, jobId]) // One review per user per job
  @@map("reviews")
}
